`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 03/13/2025 01:07:59 AM
// Design Name: 
// Module Name: curved_line_generator
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
/////////////////////////////////////////////////////////////////////////////////////
// Reference: This module was mainly generated by GPT. The group was only responsible
//            for debugging the module and inserting the correct values.
/////////////////////////////////////////////////////////////////////////////////////

module curve_line_generator(
    input  [12:0] pixel_index, 
    input  [6:0]  start_x,       // Starting x-coordinate
    input  [5:0]  start_y,       // Starting y-coordinate
    input  [6:0]  end_x,         // Ending x-coordinate
    input  [5:0]  end_y,         // Ending y-coordinate
    input  [7:0]  curvature,     // Curvature factor
    input         curve_invert,  // 0: add offset; 1: subtract offset
    output        draw           // Draw pixel if on curve
    );
    
    parameter THICKNESS   = 0;
    parameter CURVE_SCALE = 100;

    // Convert pixel index to (x,y)
    wire [6:0] x_coord = pixel_index % 96;
    wire [5:0] y_coord = pixel_index / 96;
    
    // Process pixels only within the x-range
    wire within_range = (x_coord >= start_x) && (x_coord <= end_x);
    
    // Linear interpolation: y_linear = start_y + ((x - start_x) * (end_y - start_y)) / (end_x - start_x)
    wire [6:0] x_offset    = x_coord - start_x;
    wire [6:0] delta_x     = end_x - start_x;
    wire [7:0] delta_y     = end_y - start_y;
    wire [14:0] interp_prod= x_offset * delta_y;
    wire [7:0] y_linear    = start_y + (interp_prod / delta_x);
    
    // Quadratic offset: offset = curvature * (x - start_x) * (end_x - x) / CURVE_SCALE
    wire [6:0] term1       = x_coord - start_x;
    wire [6:0] term2       = end_x - x_coord;
    wire [13:0] quadratic  = term1 * term2;
    wire [15:0] offset_full= curvature * quadratic;
    wire [7:0] offset      = offset_full / CURVE_SCALE;
    
    // Choose to add or subtract the offset based on curve_invert.
    // If subtracting, ensure we don't underflow.
    wire [7:0] y_curve = curve_invert ? ((y_linear > offset) ? (y_linear - offset) : 0)
                                      : (y_linear + offset);
    
    // Compare the actual y with the computed curve value.
    wire [7:0] diff_y = (y_coord >= y_curve) ? (y_coord - y_curve) : (y_curve - y_coord);
    
    assign draw = within_range && (diff_y <= THICKNESS);
    
endmodule


